1. java.io.Serializable을 import하는 이유는 무엇인가요?
Serializable 인터페이스는 구현해야하는 메서드가 없는 마커 인터페이스이다.
객체가 직렬화 대상이 될 수 있음을 명시하는 역할을 한다.
Serializable 인터페이스를 구현한 객체만 객체를 파일로 읽고 쓰거나, 네트워크를 통해 전송할때 ObjectInputStream, ObjectOutputStream에 의해서 처리할 수 있고,
그렇지 않으면 NotSerializableException이 발생한다.
2. java.io.Serializable의 serialVersionUID를 지정하는 이유는 무엇인가요?
static field로 직접 지정할 수 있고, 컴파일러에 의해 자동으로 추가될 수 있다.
객체의 버전을 나타내는 고유 식별자로, 직렬화된 객체의 클래스 버전과 jvm에서 로드된 클래스의 버전이 일치하는지 검사하여
클래스의 호환성을 유지하고 정확한 역직렬화를 보장합니다.
클래스의 버전이 다르면 InvalidClassException을 발생시키고, 클래스의 정의가 변경되어도 버전이 같으면 가능한 한 객체를 역직렬화합니다.
3. 자바에서 객체를 파일로 읽거나 쓸때 사용하는 Stream클래스의 이름은 무엇인가요? ObjectOutputStream/ ObjectInputStream
4. transient예약어의 용도는 무엇인가요? 특정 필드를 직렬화 대상에서 제외.
5. NIO가 생긴 이유는 무엇인가요? 속도. 채널과 버퍼를 사용.
6. NIO에서 채널의 용도는? 데이터의 소스 또는 목적지와의 연결을 나타냄. ex) 소켓, 파일등과의 연결을 추상화. 데이터의 효율적 전송 및 비블로킹 io작업
7. NIO에서 버퍼의 용도는? 데이터를 임시 저장하는 영역.
8. NIO에서 버퍼의 상태를 확인하기 위한 메서드들은 어떤 것이 있나요?
- capacity() : 버퍼에 담을 수 있는 크기
- position() : 현재 바이트 위치
- limit() : 데이터를 읽거나 쓸 수 없는 첫번째 바이트.
9. NIO에서 Buffer의 position을 변경하기 위한 메소드들에는 어떤 것들이 있나요?
- reset() : mark로 되돌린다.
- rewind() : position을 0으로 돌린다
